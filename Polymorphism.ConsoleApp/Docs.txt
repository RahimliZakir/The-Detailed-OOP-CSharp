- C# Polymorphism
The term "Polymorphism" is the combination of "poly" + "morphs" which means many forms. It is a greek word. 
In object-oriented programming, we use 3 main concepts: inheritance, encapsulation and polymorphism.
Polymorphism simply means occurring in more than one form.
That is, the same entity (method or operator or object) can perform different operations in different scenarios.

-Types of Polymorphism
There are two types of polymorphism:
1. Compile Time Polymorphism / Static Polymorphism
   In static polymorphism, the behavior of a method is decided at compile time. That means the C# compiler
   binds method calls with method definition/body during compilation time only. Therefore, this type of 
   polymorphism is also called compile-time polymorphism in C#. As the binding (the link between the function
   call and function definition) is performed at compile time, it is also known as early binding.
2. Run-Time Polymorphism / Dynamic Polymorphism
   In dynamic polymorphism, the behavior of a method is decided at runtime. Therefore, the CLR 
   (Common Language Runtime) binds the method call with the method definition/body at runtime and invokes
   the relevant method during runtime when the method is called.

- 1. Compile Time (Static) Polymorphism
• Method overloading
  Method Overloading means it is an approach to defining multiple methods under the class with a single 
  name. So, we can define more than one method with the same name in a class. But the point that you need
  to remember the parameters of all those methods should be different (different in terms of number, type,
  and order of the parameters).

• Operator overloading
  By overloading the operators, we can give additional meaning to the operators like +-*/=.,= etc., which
  by default is supposed to work with only on standard data types like int, float, char, void, etc. 
  It’s a type of polymorphism in which an operator is overloaded to give it the user-defined meaning.
  The syntax for C# Operator Overloading:
  public static return_type operator op (Type t) 
  {
      Statements
  }
  1. The 'return type' is the return type of the function.
  2. the 'operator' is a keyword.
  3. 'Op' is the symbol of the operator that we want to overload. Like: +, <, -, ++, etc.
  4. The 'type' must be a class or struct. It can also have more parameters.
  5. It should be a 'static' function.
  The following table describes the overloading ability of the various operators available in C#:
  Operators                 Description
  +, -, !, ~, ++, --        'Unary' operators take 'one operand' and can be overloaded.
  +, -, *, /, %             'Binary' operators take 'two operands' and can be overloaded.
  ==, !=,                   'Comparison' operators can be overloaded.
  &&, ||                    'Conditional logical' operators cannot be overloaded directly.
  +=, -+, *=, /=, %=,=      'Assignment' operators cannot be overloaded.

• Method Hiding or Method Shadowing
  In Method Hiding/Shadowing, the child classes can re-implement any method of its parent class methods 
  even if they are not declared as virtual. That means here the child class re-implements the parent class
  methods without taking any permission from its parent.
  - IMPORTANNT:
    The point that you need to remember is that a parent class reference variable even if created by using 
    the child class instance, cannot access any members which are purely defined inside the child class but
    can call the overriding methods of the child class because overridden members are not considered as pure
    child class members, but the members which are re-implemented inside the child class by using the approach
    of hiding are considered as pure child class members and cannot be accessed by Parent reference variable.

- 2. Runtime (Dynamic) Polymorphism
• Method Overriding
  The process of re-implementing the superclass non-static, non-private, and non-sealed method in the 
  subclass with the same signature is called Method Overriding in C#. The same signature means the name 
  and the parameters (type, number, and order of the parameters) should be the same. 
  If you want to override the Parent class method in its Child classes, first the method in the parent 
  class must be declared as virtual by using the virtual keyword, then only the child classes get permission
  for overriding that method.